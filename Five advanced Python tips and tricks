# Use list comprehensions for concise and readable code
even_squares = [x**2 for x in range(10) if x % 2 == 0]
print(even_squares)


# Create a decorator for code reuse and modularity
def my_decorator(func):
    def wrapper():
        print("Something is happening before the function is called.")
        func()
        print("Something is happening after the function is called.")
    return wrapper

@my_decorator
def say_hello():
    print("Hello!")

say_hello()

# Use context managers for resource management (e.g., file handling)
with open('example.txt', 'r') as file:
    content = file.read()
    # Process file content

# No need to explicitly close the file; it's handled by the context manager

# Utilize lambda functions for short, one-line expressions
multiply = lambda x, y: x * y
print(multiply(3, 4))


# Use generator expressions for memory-efficient iteration
square_generator = (x**2 for x in range(10))
print(list(square_generator))  # Convert to list if needed
